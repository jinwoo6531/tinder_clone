{"version":3,"sources":["components/Header/Header.js","firebase.js","components/TinderCards/TinderCards.js","components/SwipeButtons/SwipeButtons.js","components/Chats/Section/Chat.js","components/Chats/Chats.js","components/ChatScreen/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","TinderCards","useState","people","setPeople","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","preventSwipe","style","backgroundImage","url","name","SwipeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","index","value","onChange","e","target","type","placeholder","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3b8a4c0e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport './Header.css';\n\nfunction Header({ backButton }) {\n  const history = useHistory();\n  return (\n    <div className=\"header\">\n      {backButton ? (\n        <IconButton onClick={() => history.replace(backButton)}>\n          <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\" />\n        </IconButton>\n      ) : (\n        <IconButton>\n          <PersonIcon className=\"header__icon\" fontSize=\"large\" />\n        </IconButton>\n      )}\n\n      <Link to=\"/\">\n        <img\n          className=\"header__logo\"\n          src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\n          alt=\"logo\"\n        />\n      </Link>\n      <Link to=\"/chat\">\n        <IconButton>\n          <ForumIcon className=\"header__icon\" fontSize=\"large\" />\n        </IconButton>\n      </Link>\n    </div>\n  );\n}\n\nexport default Header;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst database = firebaseApp.firestore();\n\nexport default database;\n","import React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport database from '../../firebase';\nimport './Tindercards.css';\n\nfunction TinderCards() {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    database\n      .collection('people')\n      .onSnapshot((snapshot) =>\n        setPeople(snapshot.docs.map((doc) => doc.data()))\n      );\n  }, []);\n\n  return (\n    <div>\n      <div className=\"tinerCards__cardContainer\">\n        {people.map((person) => (\n          <TinderCard\n            className=\"swipe\"\n            key={person.key}\n            preventSwipe={['up', 'down']}\n          >\n            <div\n              style={{ backgroundImage: `url(${person.url})` }}\n              className=\"card\"\n            >\n              <h3>{person.name}</h3>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default TinderCards;\n","import React from 'react';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '@material-ui/core/IconButton';\nimport './SwipeButtons.css';\n\nfunction SwipeButtons() {\n  return (\n    <div className=\"swipeButtons\">\n      <IconButton className=\"swipeButtons__repeat\">\n        <ReplayIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton className=\"swipeButtons__left\">\n        <CloseIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton className=\"swipeButtons__star\">\n        <StarRateIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton className=\"swipeButtons__right\">\n        <FavoriteIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton className=\"swipeButtons__lightning\">\n        <FlashOnIcon fontSize=\"large\" />\n      </IconButton>\n    </div>\n  );\n}\n\nexport default SwipeButtons;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Link } from 'react-router-dom';\nimport './Chat.css';\nfunction Chat({ name, message, profilePic, timestamp }) {\n  return (\n    <Link to={`/chat/${name}`}>\n      <div className=\"chat\">\n        <Avatar className=\"chat__image\" src={profilePic} />\n        <div className=\"chat__details\">\n          <h2>{name}</h2>\n          <p>{message}</p>\n        </div>\n        <p className=\"chat__timestamp\">{timestamp}</p>\n      </div>\n    </Link>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\nimport Chat from './Section/Chat';\nimport './Chats.css';\n\nfunction Chats() {\n  return (\n    <div className=\"chats\">\n      <Chat\n        name=\"명성\"\n        message=\"Hey! how are you😄\"\n        timestamp=\"35 seconds ago\"\n        profilePic=\"https://i.pinimg.com/originals/f4/43/bd/f443bd4d47b6005f61fb8ab4271b204e.jpg\"\n      />\n      <Chat\n        name=\"현오\"\n        message=\"Whats up?\"\n        timestamp=\"55 seconds ago\"\n        profilePic=\"https://www.sisaweek.com/news/photo/201608/76045_55770_456.jpg\"\n      />\n    </div>\n  );\n}\n\nexport default Chats;\n","import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport './ChatScreen.css';\nfunction ChatScreen() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    {\n      name: 'Ellen',\n      image:\n        'https://i.pinimg.com/originals/f4/43/bd/f443bd4d47b6005f61fb8ab4271b204e.jpg',\n      message: 'Whats up',\n    },\n    {\n      name: 'Ellen',\n      image:\n        'https://i.pinimg.com/originals/f4/43/bd/f443bd4d47b6005f61fb8ab4271b204e.jpg',\n      message: '머해',\n    },\n    {\n      message: 'Hi!',\n    },\n  ]);\n  const handleSend = (e) => {\n    e.preventDefault();\n    setMessages([...messages, { message: input }]);\n    setInput('');\n  };\n  return (\n    <div className=\"chatScreen\">\n      {messages.map((message, index) =>\n        message.name ? (\n          <div className=\"chatScreen__message\" key={index}>\n            <Avatar\n              className=\"chatScreen__message\"\n              alt={message.name}\n              src={message.image}\n            />\n            <p className=\"chatScreen__text\">{message.message}</p>\n          </div>\n        ) : (\n          <div className=\"chatScreen__message\" key={index}>\n            <p className=\"chatScreen__textUser\">{message.message}</p>\n          </div>\n        )\n      )}\n      <div>\n        <form className=\"chatScreen_input\">\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            className=\"chatScreen__inputField\"\n            type=\"text\"\n            placeholder=\"Type a message..\"\n          />\n          <button\n            onClick={handleSend}\n            type=\"submit\"\n            className=\"chatScreen__inputButton\"\n          >\n            SEND\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatScreen;\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport TinderCards from './components/TinderCards/TinderCards';\nimport SwipeButtons from './components/SwipeButtons/SwipeButtons';\nimport Chats from './components/Chats/Chats';\nimport ChatScreen from './components/ChatScreen/ChatScreen';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen />\n          </Route>\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats />\n          </Route>\n          <Route path=\"/\">\n            <Header />\n            <TinderCards />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}